#!/usr/bin/perl
# ccp-testsuite
# Copyright (C) Eskild Hustvedt 2006
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;                             # Make my coding strict
use warnings;                           # Warn me!
use Fatal qw/ open /;                   # So I don't have to type "or die" too much :)
use File::Basename;                     # Needed to find out our directory and name
use Cwd;                                # Needed for getcwd
use Getopt::Long;                       # Commandline parsing
use File::Temp qw/ tempfile /;		# Need a temporary file

my $Version = "0.1.1";			# Version number
my $RootDir = dirname($0);		# The dir containing ccp-testsuite
my $CCPBin;				# The path to ccp
my $TestsFailed;			# The number of failed tests
my $TestsRun;				# The total number of tests run
my $CommandEnding = '&>/dev/null';	# The ending to the ccp command
my $Verbose;

Getopt::Long::Configure ("bundling", 'prefix_pattern=(--|-)');

if (-x "$RootDir/../ccp") {
	$CCPBin = "$RootDir/../ccp";
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial helper routines
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Routine that checks wether a specific command is in PATH
sub InPath {
        foreach (split /:/, $ENV{PATH}) {
                if (-x "$_/@_" and ! -d "$_/@_" ) {
                        return 1;
                }
        }
        return 0;
}
# The function that actually outputs the help
# This is just because I'm too lazy to type the printf every time
# and this function makes it more practical.
# Syntax is simply: PrintHelp("shortoption", "longoption", "description")
sub PrintHelp ($$$) {
        printf "%-4s %-16s %s\n", "$_[0]", "$_[1]", "$_[2]";
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Parsing of commandline parameters
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

GetOptions (
	'v|verbose' => \$Verbose,
	'L|ccpverbosity=s' => sub {
		$Verbose = 1;
		if ( $_[1] eq "v" ) {
			$CommandEnding = "-v";
		} elsif ( $_[1] eq "V" ) {
			$CommandEnding = "-V";
		} elsif ( $_[1] eq "D" ) {
			$CommandEnding = "-D";
		} elsif ( $_[1] eq "s" ) {
			$CommandEnding = "";
		} else {
			die "Invalid selection: $_[1]\n";
		}
	},
	'ccp=s' => sub {
		if ( -x $_[1] and not -d $_[1]) {
			print "x\n";
			$CCPBin = $_[1];
		} elsif (InPath($_[1])) {
			$CCPBin = $_[1];
		} else {
			die "Invalid CCP selection: $_[1]\n";
		}
	},
	'h|help' => sub {
		print "CCP Testsuite $Version\n\n";
		print "Run without options to just run the testcases with the default\n";
		print "CCP.\n\n";
		print "Optional options:\n";
		PrintHelp("-v", "--verbose", "Be verbose");
		PrintHelp("","--ccp", "Specify an alternate CCP (command or path)");
		PrintHelp("-L", "--ccpverbosity", "Set the CCP verbosity level (v/V/D/s)");
		PrintHelp("","", "v == --verbose || V == --veryverbose");
		PrintHelp("","","D = --debug || s = standard/normal/nonverbose");
		exit 0;
	}
) or die "\n";

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initialization
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

my ($TMPFHandle, $TemporaryFile) = tempfile or die "Failed to create temporary file\n";

print "ccp-testsuite version $Version running\n\n";

# Verbose print
sub printv ($) {
	print "$_[0]" if $Verbose;
}
# Nonverbose print
sub printnv ($) {
	print "$_[0]" unless $Verbose;
}

# Detect ccp:
unless ($CCPBin) {
	die "Unable to detect where ccp is\n";
}

# We need diff
die "Unable to find diff - make sure it is installed\n" unless InPath("diff");

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# The test itself
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
foreach(<$RootDir/*>) {
	# If the file isn't a dir or doesn't have testsuite.conf then skip it
	if (-d $_ and -e "$_/testsuite.conf") {
		# Declare variables
		my (
			$ReturnValue,	$CCPOpts
		);
		my $Error = 0;
		# Display initial message
		print "Running test: ", basename($_),"...";
		# We also need the NEWFILE, OLDFILE and DESIRED_OUTPUT files
		unless (-e "$_/NEWFILE" and -e "$_/OLDFILE" and -e "$_/DESIRED_OUTPUT") {
			print "invalid test - skipping\n" and next;
		}
		# Read the config
		{
			open(CONFIG, "<$_/testsuite.conf");
			foreach(<CONFIG>) {
				next if /^\s*#/;	# Skip comments
				# We only recognize one option anyway right now
				if (/^\s*CCPOpts/) {
					s/^\s*CCPOpts\s*=\s*'?"?(.*)"?'?$/$1/;
					$CCPOpts = $_;
					chomp($CCPOpts);
					last;
				}
			}
			close(CONFIG);
		}
		# Increment the counter of the number of tests run.
		$TestsRun++;
		# If the temp file already exists, remove it.
		unlink($TemporaryFile) if -e $TemporaryFile;
		printv "\nRunning ccp: $CCPBin $CCPOpts --newfile $_/NEWFILE --oldfile $_/OLDFILE --outputfile $TemporaryFile $CommandEnding\n";
		# Run ccp, silently
		$ReturnValue = system("$CCPBin $CCPOpts --newfile $_/NEWFILE --oldfile $_/OLDFILE --outputfile $TemporaryFile $CommandEnding");
		# If ccp fails, then stop here
		if ($ReturnValue) {
			$Error = "Nonzero-return-value ($ReturnValue)";
		} else {	# If not, then continue on with the real test
			if (-e $TemporaryFile) {
				# TODO: Don't use diff.
				if (system("diff -q $TemporaryFile $_/DESIRED_OUTPUT &>/dev/null")) {
					$Error = "Desired_output-and-resulting-output-differ";
				}
			} else {
				$Error = "No-output-file-at-all";
			}
		}
			
		# Did we fail?
		unless ($Error) {
			# No :D
			printnv "okay :)\n" unless $Verbose;
			printv "Test succeeded :)\n";
		} else {
			$TestsFailed++;
			# Yes...
			printnv "failed!\n";
			printv "Test failed!\n";
			print " Command: $CCPBin $CCPOpts --newfile $_/NEWFILE --oldfile $_/OLDFILE --outputfile $TemporaryFile\n" unless $Verbose;
			print " ERROR: $Error\n";
		}
		printv "\n";
	}
}
unlink($TemporaryFile);
# Display final statistics
print "\n";
if ($TestsFailed) {
	die "$TestsFailed of $TestsRun tests failed\n";
} else {
	print "All is well - no tests failed :)\n";
}
